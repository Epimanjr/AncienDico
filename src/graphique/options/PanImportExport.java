/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphique.options;

import base.io.Exporter;
import base.io.Importer;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import main.donnees.Donnees;

/**
 *
 * @author Maxime
 */
public class PanImportExport extends javax.swing.JPanel {

    /**
     * Creates new form PanImportExport
     */
    public PanImportExport() {
        initComponents();

        /* Contraste */
        activerContraste();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        importer = new javax.swing.JButton();
        exporter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        labTime = new javax.swing.JLabel();
        labQuery = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(600, 450));

        importer.setText("Importer");
        importer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importerActionPerformed(evt);
            }
        });

        exporter.setText("Exporter");
        exporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 0));
        jLabel1.setText("Import/Export de la base de données ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labTime, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(importer, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exporter, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(importer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exporter, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(labTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterActionPerformed
        // TODO add your handling code here:

        // Exporter
        t = new Thread(new TraitementExporter());
        t.start();
    }//GEN-LAST:event_exporterActionPerformed

    private void importerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importerActionPerformed
        // TODO add your handling code here:

        // Importer
        t = new Thread(new TraitementImporter());
        t.start();
    }//GEN-LAST:event_importerActionPerformed

    /**
     * Modifie la valeur de la barre de progression
     *
     * @param i valeur
     */
    public void setValueBar(int i) {
        jProgressBar1.setValue(i);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exporter;
    private javax.swing.JButton importer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel labQuery;
    private javax.swing.JLabel labTime;
    // End of variables declaration//GEN-END:variables
    public Thread t;

    public void setLabQueryText(String string) {
        this.labQuery.setText(string);
    }

    class TraitementExporter implements Runnable {

        @Override
        public void run() {
            jProgressBar1.setStringPainted(true);

            /* Initialisation */
            Donnees.nombreTotalRequetes = 0;

            try {
                Exporter.exporterLiaison();
                jProgressBar1.setValue(50);

                Exporter.exporterMot();
                jProgressBar1.setValue(100);

                setLabQueryText("Exportation terminée !");
            } catch (UnsupportedEncodingException | FileNotFoundException | SQLException ex) {
                Logger.getLogger(PanImportExport.class.getName()).log(Level.SEVERE, null, ex);
            }


        }

    }

    class TraitementTime implements Runnable {

        @Override
        public void run() {
            // Temps de départ
            long startTime = System.currentTimeMillis();

            while (true) {
                try {
                    Thread.sleep(40);
                } catch (InterruptedException ex) {
                }

                // temps actuel
                long tmp = System.currentTimeMillis();
                afficherTime(tmp - startTime);

            }
        }

        private void afficherTime(long l) {
            long sec = l / 1000;
            l %= 1000;
            long min = sec / 60;
            sec %= 60;

            if (min == 0) {
                labTime.setText(sec + "s" + (l / 10));
            } else {
                labTime.setText(min + "." + sec + "s" + (l / 10));
            }
        }

    }

    class TraitementImporter implements Runnable {

        @Override
        public void run() {

            // Désactivation du bouton
            importer.setEnabled(false);

            /* Traitement => Chronomètre */
            Thread t2 = new Thread(new TraitementTime());
            t2.start();

            jProgressBar1.setStringPainted(true);

            Importer.compteur = 0;
            Importer.importer();

            t2.stop();
            setLabQueryText("Importation terminée !");

            // Réactivation du bouton
            importer.setEnabled(true);
        }

    }

    public void activerContraste() {
        /* Modification PANEL */
        this.setBackground(Donnees.contraste.couleurs.get("fond"));

        /* LABEL */
        jLabel1.setForeground(Donnees.contraste.couleurs.get("labelTitre"));
        jLabel1.setBackground(Donnees.contraste.couleurs.get("fond"));

        labQuery.setForeground(Donnees.contraste.couleurs.get("label"));
        labQuery.setBackground(Donnees.contraste.couleurs.get("fond"));

        labTime.setForeground(Donnees.contraste.couleurs.get("label"));
        labTime.setBackground(Donnees.contraste.couleurs.get("fond"));

        /* BOUTON */
        exporter.setForeground(Donnees.contraste.couleurs.get("bouton"));
        exporter.setBackground(Donnees.contraste.couleurs.get("boutonFond"));

        importer.setForeground(Donnees.contraste.couleurs.get("bouton"));
        importer.setBackground(Donnees.contraste.couleurs.get("boutonFond"));
    }
}
